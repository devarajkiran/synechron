Lab 6 - Ribbon
Create two projects
	Project1 - Day2.demo1.proj1
			-> Hsqldb, Web Starter, JPA
				-> get -> return List of employees (1..5)
				
			download of Day2.demo1.proj1.jar file and setup in sts
	Project2   Day2.demo2.proj2
			-> Hsqldb, Web Starter, JPA
				-> get -> return List of employees (5..10)
		
		ren  Day2.demo1.proj2.jar file, change to return 6..10 records
		change application.properties -> server.port - 8081
		
		
Project3 - Day2.demo3.ribbondemo
		-> web, Ribbon
		Create application.yml file 
			simple:
			 ribbon:
			  eureka:
			   enabled: false
			  listOfServers: localhost:8080,localhost:8081
			  ServerListRefreshInterval: 5000
			server:
			  port: 80 
		-> ribbonapp.java
		@SpringBootApplication
@RestController
public class RibbonApp {

	public static void main(String[] args) {
		SpringApplication.run(RibbonApp.class, args);
	}
	@Autowired
	RestTemplate template;
	
	@Bean
	@LoadBalanced
	public RestTemplate resttmp() {
		return new RestTemplate();
	}
	
	@GetMapping()
	public String showdata()
	{
		String str = template.getForEntity("http://simple/emps",String.class).getBody();
		return "<h1>Current Data</h1><h2>" + str + "</h2>"  ;
	}

}
		
		
		
		
		
		
		
		
		
		
		  	 
Lab 5 - Change Eureka Server port (8765)
	Client Properties - eureka.client.serviceUrl.defaultZone=http://localhost:8765/eureka
		eureka.client.serviceUrl.defaultZone=http://localhost:8765/eureka
		
	Write - new Application
		Code to connect to Client1 and Client2
		Display a page 
	Day1.Lab1
		-> Write a client to show combined message from Client1 and Client2
		Output / In MyClient2Controller
				 EurekaClient1- MyController-SayHello (red)
				 EurekaClient1- MyController-SayHello (green)
				 
		
		
Lab 4 - Eureka demo for Server Side LoadBalancing
	1. Change Client 1 to create multiple instance of client1 service
		change Controller code to 
			@GetMapping(value="/")
	public String sayhello() {
		return "<h1 style='color:green;'>EurekaClient1- MyController-SayHello<h1>" ;
	}
		server.port=8090
		
	1st Instance -----> EurekaClientApp1 -> run as application
	
	Modify Controller code to change green to red
	modify port to 8091
	2nd Instance -----> EurekaClientApp1 -> run as application
	
	Test the Client2 (on refresh -> Round Robin in Red and green
	Modify Controller code to change red to blue
	modify port to 8092
	3nd Instance -----> EurekaClientApp1 -> run as application
	
	Test the Client2 (on refresh -> Round Robin in Red, green and blue)
	stop one EurekaClientApp1 
		refresh faster -> error , two colours
			after some time -> only two colours
			
			
Lab3 - Eureka Client 2
	Spring Initializer
		Group - Day1
		Artifact - Day1.demo2.EurekaClient2
		
		Dependencies - Eureka Discovery Client, Spring Web Starter
		Import
	After import
	1. Change Application.java to EurekaClientApp2 and have code
		@SpringBootApplication
		@EnableEurekaClient
		public class EurekaClientApp2 {
			
			@Bean
			@LoadBalanced
			public RestTemplate resttmp() {
				return new RestTemplate();
			}
			public static void main(String[] args) {
				SpringApplication.run(EurekaClientApp2.class, args);
			}
		}

	2. Write MyController
		@RestController
		public class MyClient2Controller {
			
			@Autowired
			RestTemplate template ;
			@GetMapping
			public String get() {
				//String url ="http://localhost:8090";
				String url = "http://Client1"; // client1 is name of service
			  String str = template.getForEntity(url, String.class).getBody();
				
				return "<h1>In MyClient2Controller</h1><h1>" + str + "</h1>" ;
			}
		}


	3. change application.properties file to include
		server.port=80
		spring.application.name=Client2
		eureka.client.register-with-eureka=true
		eureka.client.fetch-registry=true

	4. Run application
		Check Eureka Server to check instances (client1, client2)
		http://localhost:80 
		
		



Lab2 - Eureka Client
	Spring Initializer
		Group - Day1
		Artifact - Day1.demo2.EurekaClient1
		
		Dependencies - Eureka Discover Client, Spring Web Starter
		Import
	After import
	1. Change Application.java to EurekaClientApp1 and have code
		@SpringBootApplication
		@EnableEurekaClient
		public class EurekaClientApp1 {
	
			public static void main(String[] args) {
				SpringApplication.run(EurekaClientApp1.class, args);
			}
		}

	2. Write MyController
	@RestController
	public class MyController {

		@GetMapping(value="/")
		public String sayhello() {
			return "EurekaClient1- MyController-SayHello" ;
		}
	}
	
	3. change application.properties file to include
		server.port=8090
		spring.application.name=Client1
		eureka.client.register-with-eureka=true
		eureka.client.fetch-registry=false
		
	4. Run application
		Check Eureka Server to check instance
		
		
		
Lab1 - Eureka Server
	Spring Initializer = https://start.spring.io/
	Maven, Java, 2.1.6, 
	Project details - Day1, Day1.demo1.EurekaServer
	
	Dependency - EurekaServer
	
	Generate -> download project
	
	On STS -> Import maven project
	start -> build 
	
	1. Rename Application -> EurekaServerApp 
		add annotation for application
			@EnableEurekaServer
	2. run application
		http://localhost:8080
			observe eureka application
	3. modify application.properties 
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false

	4. run application
		http://localhost:8761
			observe eureka application	
	
	
